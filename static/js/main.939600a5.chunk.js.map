{"version":3,"sources":["serviceWorker.js","index.js","components/Chart.jsx","components/Input.jsx","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","Chart","props","className","style","margin","data","labels","datasets","label","fcn","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","options","scales","xAxes","display","yAxes","Input","useState","value","setValue","onSubmit","e","preventDefault","runFcn","setFcn","width","borderStyle","borderWidth","onValueChange","code","highlight","languages","js","padding","fontFamily","fontSize","type","onClick","color","setLabels","setData","strFcn","eval","times","results","i","t1","performance","now","result","t2","push","log"],"mappings":"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","file":"static/js/main.939600a5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst Chart = (props) => {\n\n  return (\n    <div className=\"chart\" style={{margin:'20px'}}>\n      <Line\n        data={{ \n          labels: props.labels, \n          datasets: [{\n            label: props.fcn,\n            fill: false,\n            lineTension: 0.4,\n            backgroundColor: \"rgba(75,192,192,0.4)\",\n            borderColor: \"rgba(75,192,192,1)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgba(75,192,192,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 10,\n            pointRadius: 0,\n            // pointHitRadius: 10,\n            data: props.data,\n          } ]\n        }}\n        options={{\n          scales: {\n            xAxes: [\n              {\n                display: false,\n              },\n            ],\n            yAxes: [\n              {\n                display: false,\n              },\n            ],\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Chart;","import React, { useState } from \"react\";\nimport Editor from \"react-simple-code-editor\";\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-javascript\";\n\nconst Input = (props) => {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    props.runFcn(value);\n    props.setFcn(value);\n  };\n\n  const handleClear = () => {\n    setValue(\"\");\n  };\n  return (\n    <div style={{\n      margin: '20px'\n    }}>\n      <p>Enter your function here:</p>\n      <form onSubmit={handleSubmit}>\n        <div style={{\n          margin:'2px',\n          width:'80%',\n          borderStyle:'solid',\n          borderWidth:'2px',\n          borderColor:'grey'\n        }}>\n          <Editor\n            value={value}\n            onValueChange={(code) => setValue(code)}\n            highlight={(code) => highlight(code, languages.js)}\n            padding={10}\n            style={{\n              fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n              fontSize: 12,\n            }}\n          />\n        </div>\n        <button type=\"submit\" className=\"run\">\n          <span>Submit</span>\n        </button>\n        <button\n          onClick={handleClear}\n          className=\"run\"\n          style={{\n            backgroundColor: \"white\",\n            color: \"grey\",\n            borderWidth: \"1px\",\n            borderColor: \"grey\",\n          }}\n        >\n          Clear\n        </button>\n        {/* </div> */}\n      </form>\n    </div>\n  );\n};\n\nexport default Input;\n\nconst f = (n) => {\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = 0; k < n; k++) {\n        console.log(i, j, k);\n      }\n    }\n  }\n};\n","import React, { useState } from \"react\";\nimport { Chart, Input } from \"./components\";\n\nfunction App() {\n  const [fcn, setFcn] = useState(\"arg => arg * 2\");\n  const [labels, setLabels] = useState([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\n  const [data, setData] = useState([\n    0.050000002374872565,\n    0.36499999987427145,\n    1.0550000006332994,\n    2.139999996870756,\n    3.2949999877018854,\n    4.684999992605299,\n    6.689999994705431,\n    9.244999993825331,\n    11.320000005071051,\n    13.724999997066334,\n    15.520000000833534,\n  ]);\n\n  const runFcn = (strFcn) => {\n    const fcn = eval(strFcn);\n    if (fcn === \"\" || typeof fcn != \"function\") return [[], []];\n    const labels = [];\n    const times = [];\n    const results = [];\n    for (let i = 0; i < 100; i++) {\n      let t1 = performance.now();\n      let result = fcn(i);\n      let t2 = performance.now();\n      labels.push(i);\n      times.push(t2 - t1);\n      results.push(result);\n      if (t2 - t1 > 15) break;\n    }\n    console.log(labels, times);\n    setLabels(labels);\n    setData(times);\n  };\n\n  return (\n    <div>\n      <Input runFcn={runFcn} setFcn={setFcn} />\n      <Chart fcn={fcn} labels={labels} data={data} />\n    </div>\n  );\n}\n\nexport default App;\n\n// (n) => { for (var i = 0; i < n; i++) { for (var j = 0; j < n; j++) { console.log(i, j); } } }\n"],"sourceRoot":""}